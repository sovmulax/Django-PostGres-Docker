"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from celery.schedules import crontab
from pathlib import Path
import os
import environ

BASE_DIR = Path(__file__).resolve().parent.parent.parent

USE_I18N = True

USE_TZ = True

TIME_ZONE = "UTC"

LANGUAGE_CODE = "fr"


# Initialise environment variables
env = environ.Env()
environ.Env.read_env()

SECRET_KEY = env("SECRET_KEY")
DEBUG = env("DEBUG")
ALLOWED_HOSTS = env("DJANGO_ALLOWED_HOSTS").split(" ")
ALLOWED_ORIGINS = env("ALLOWED_ORIGINS").split(" ")
CSRF_TRUSTED_ORIGINS = ALLOWED_ORIGINS.copy()
BASE_URL = env("BASE_URL")
CRSF_COOKIE_SECURE = int(env("CRSF_COOKIE_SECURE", default=0))

LOGIN_URL = ""
LOGIN_REDIRECT_URL = "/home"
LOGOUT_REDIRECT_URL = ""

# Application definition
INSTALLED_APPS = [
    "admin_interface",
    "colorfield",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "safedelete",
    "simple_history",
    "import_export",
    "django_celery_results",
    "session_security",  # Django plugin to log out users
    "maintenance",
    # "axes",  # Django plugin for keeping track of suspicious login
    ### Local apps ###
    "appname",  # put your app name
    "maintenance_mode"
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "session_security.middleware.SessionSecurityMiddleware",  # Session security
    "simple_history.middleware.HistoryRequestMiddleware",  # django-simple-history
    # "axes.middleware.AxesMiddleware",  # Axes
    "maintenance_mode.middleware.MaintenanceModeMiddleware",
]

SESSION_SERIALIZER = "django.contrib.sessions.serializers.PickleSerializer"
AUTO_LOGOUT_DELAY = 144
# SESSION_EXPIRE_AT_BROWSER_CLOSE = True
# SESSION_SECURITY_WARN_AFTER = 14 * 60
# SESSION_SECURITY_EXPIRE_AFTER = 15 * 60

# AUTHENTICATION_BACKENDS = [
#     "axes.backends.AxesBackend",  # Axes must be first
#     "django.contrib.auth.backends.ModelBackend",
# ]

# AXES_LOCKOUT_PARAMETERS = ["ip_address", ["username", "user_agent"]]
# AXES_FAILURE_LIMIT = 20  # 3 is the default value
# AXES_COOLOFF_TIME = 1  # 2 hours before being able to log in
# AXES_RESET_ON_SUCCESS = True  # If True, only lock based on username, and never lock based on IP if attempts exceed the limit. Otherwise utilize the existing IP and user locking logic.


ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates/")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "core.context_processors.data_context_processor",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"
# AUTH_USER_MODEL = "appname.CustomUser"

# Database

DATABASES = {
    "default": {
        "ENGINE": env("SQL_ENGINE", default="django.db.backends.sqlite3"),
        "NAME": env("SQL_DATABASE", default=os.path.join(BASE_DIR, "db.sqlite3")),
        "USER": env("SQL_USER", default=""),
        "PASSWORD": env("SQL_PASSWORD", default=""),
        "HOST": env("SQL_HOST", default=""),
        "PORT": env("SQL_PORT", default=""),
        "CONN_MAX_AGE": 0,
        "TEST": {
            "NAME": env("SQL_TEST_DATABASE", default=":memory:"),
        },
    }
}


# Password validation

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
DATE_INPUT_FORMATS = ("%d/%m/%Y", "%Y-%m-%d")

# celery broker and result
CELERY_TIMEZONE = env("CELERY_TIMEZONE")
CELERY_BROKER_URL = env("CELERY_BROKER_URL")
CELERY_RESULT_BACKEND = env("CELERY_RESULT_BACKEND")
CELERY_BEAT_SCHEDULE = {
    "Task_one_schedule": {
        "task": "appname.tasks.task_one",
        "schedule": crontab(minute=00, hour=7),
    },
}

# Email settings
EMAIL_BACKEND = env("EMAIL_BACKEND")
EMAIL_HOST = env("EMAIL_HOST")
EMAIL_USE_TLS = env("EMAIL_USE_TLS")
EMAIL_PORT = env("EMAIL_PORT")
EMAIL_HOST_USER = env("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD")
EMAIL_RECIPIENT = env("EMAIL_RECIPIENT")

MAINTENANCE_MODE = None
# Permettre l'accès à l'administration
MAINTENANCE_MODE_IGNORE_ADMIN_SITE = True
# Permettre l'accès aux superutilisateurs
MAINTENANCE_MODE_IGNORE_SUPERUSER = True
MAINTENANCE_MODE_STATE_BACKEND = "maintenance.backends.DatabaseBackend"
